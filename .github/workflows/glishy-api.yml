name: Glishy API

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - "*"
jobs:

  run-tests:
    name: Run Tests

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        name: "Cancel duplicate workflow runs"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        # if: "github.ref != 'refs/heads/master'"
      - uses: actions/checkout@v2.0.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: psycopg2 prerequisites
        run: |
          sudo apt-get install python-dev libpq-dev

      - name: Install pipenv
        uses: dschep/install-pipenv-action@v1

      - name: Cache Pipenv virtualenv
        uses: actions/cache@v1
        id: pipenv-cache
        with:
          path: ~/.pipenv
          key: ${{ runner.os }}-pipenv-v3-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-v3-

      - name: Install Dependencies
        env:
          PIPENV_NOSPIN: "true"
          WORKON_HOME: ~/.pipenv/virtualenvs
          PIPENV_CACHE_DIR: ~/.pipenv/pipcache
        run: pipenv install --dev
        if: steps.pipenv-cache.outputs.cache-hit != 'true'

      - name: Lint with flake8
        env:
          PIPENV_NOSPIN: "true"
          WORKON_HOME: ~/.pipenv/virtualenvs
          PYTHONPATH: "."
        run: |
          pipenv run flake8 .

      - name: Test with Coverage
        env:
          PIPENV_NOSPIN: "true"
          WORKON_HOME: ~/.pipenv/virtualenvs
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_NAME: github_actions
          SECRET_KEY: "${{ secrets.SECRET_KEY }}"
          PYTHONPATH: "."
          DJANGO_DEBUG: "False"
          CODACY_PROJECT_TOKEN: "${{ secrets.CODACY_PROJECT_TOKEN }}"
        run: |
          pipenv run coverage run --source=app/api --rcfile=.coveragerc  manage.py test --verbosity=2
          pipenv run coverage report -m
          pipenv run coverage xml --rcfile=.coveragerc
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
